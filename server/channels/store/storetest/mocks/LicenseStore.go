// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	context "context"

	model "github.com/mattermost/mattermost/server/public/model"
	mock "github.com/stretchr/testify/mock"
)

// LicenseStore is an autogenerated mock type for the LicenseStore type
type LicenseStore struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, id
func (_m *LicenseStore) Get(ctx context.Context, id string) (*model.LicenseRecord, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.LicenseRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.LicenseRecord, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.LicenseRecord); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.LicenseRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *LicenseStore) GetAll() ([]*model.LicenseRecord, error) {
	ret := _m.Called()

	var r0 []*model.LicenseRecord
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*model.LicenseRecord, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*model.LicenseRecord); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.LicenseRecord)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: license
func (_m *LicenseStore) Save(license *model.LicenseRecord) error {
	ret := _m.Called(license)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.LicenseRecord) error); ok {
		r0 = rf(license)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewLicenseStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewLicenseStore creates a new instance of LicenseStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLicenseStore(t mockConstructorTestingTNewLicenseStore) *LicenseStore {
	mock := &LicenseStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
